package com.yingluo.Appraiser.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yingluo.Appraiser.bean.ContentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTENT_INFO.
*/
public class ContentInfoDao extends AbstractDao<ContentInfo, Long> {

    public static final String TABLENAME = "CONTENT_INFO";

    /**
     * Properties of entity ContentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Content_type = new Property(3, Integer.class, "content_type", false, "CONTENT_TYPE");
        public final static Property Content_classify_id = new Property(4, Integer.class, "content_classify_id", false, "CONTENT_CLASSIFY_ID");
        public final static Property Admin_name = new Property(5, String.class, "admin_name", false, "ADMIN_NAME");
        public final static Property Admin_id = new Property(6, Long.class, "admin_id", false, "ADMIN_ID");
        public final static Property Is_valid = new Property(7, Integer.class, "is_valid", false, "IS_VALID");
        public final static Property Is_hot = new Property(8, String.class, "is_hot", false, "IS_HOT");
        public final static Property Insert_time = new Property(9, String.class, "insert_time", false, "INSERT_TIME");
        public final static Property Image = new Property(10, String.class, "image", false, "IMAGE");
        public final static Property View_times = new Property(11, Integer.class, "view_times", false, "VIEW_TIMES");
        public final static Property IsCollected = new Property(12, Integer.class, "isCollected", false, "IS_COLLECTED");
    };


    public ContentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ContentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTENT_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'CONTENT' TEXT," + // 2: content
                "'CONTENT_TYPE' INTEGER," + // 3: content_type
                "'CONTENT_CLASSIFY_ID' INTEGER," + // 4: content_classify_id
                "'ADMIN_NAME' TEXT," + // 5: admin_name
                "'ADMIN_ID' INTEGER," + // 6: admin_id
                "'IS_VALID' INTEGER," + // 7: is_valid
                "'IS_HOT' TEXT," + // 8: is_hot
                "'INSERT_TIME' TEXT," + // 9: insert_time
                "'IMAGE' TEXT," + // 10: image
                "'VIEW_TIMES' INTEGER," + // 11: view_times
                "'IS_COLLECTED' INTEGER);"); // 12: isCollected
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTENT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContentInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Integer content_type = entity.getContent_type();
        if (content_type != null) {
            stmt.bindLong(4, content_type);
        }
 
        Integer content_classify_id = entity.getContent_classify_id();
        if (content_classify_id != null) {
            stmt.bindLong(5, content_classify_id);
        }
 
        String admin_name = entity.getAdmin_name();
        if (admin_name != null) {
            stmt.bindString(6, admin_name);
        }
 
        Long admin_id = entity.getAdmin_id();
        if (admin_id != null) {
            stmt.bindLong(7, admin_id);
        }
 
        Integer is_valid = entity.getIs_valid();
        if (is_valid != null) {
            stmt.bindLong(8, is_valid);
        }
 
        String is_hot = entity.getIs_hot();
        if (is_hot != null) {
            stmt.bindString(9, is_hot);
        }
 
        String insert_time = entity.getInsert_time();
        if (insert_time != null) {
            stmt.bindString(10, insert_time);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(11, image);
        }
 
        Integer view_times = entity.getView_times();
        if (view_times != null) {
            stmt.bindLong(12, view_times);
        }
 
        Integer isCollected = entity.getIsCollected();
        if (isCollected != null) {
            stmt.bindLong(13, isCollected);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContentInfo readEntity(Cursor cursor, int offset) {
        ContentInfo entity = new ContentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // content_type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // content_classify_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // admin_name
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // admin_id
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // is_valid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // is_hot
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // insert_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // image
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // view_times
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // isCollected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContentInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent_type(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setContent_classify_id(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAdmin_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdmin_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setIs_valid(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIs_hot(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInsert_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setView_times(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIsCollected(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContentInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContentInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
