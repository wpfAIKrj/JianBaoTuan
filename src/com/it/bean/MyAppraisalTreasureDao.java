package com.it.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.it.bean.MyAppraisalTreasure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MY_APPRAISAL_TREASURE.
*/
public class MyAppraisalTreasureDao extends AbstractDao<MyAppraisalTreasure, Long> {

    public static final String TABLENAME = "MY_APPRAISAL_TREASURE";

    /**
     * Properties of entity MyAppraisalTreasure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Treasure_id = new Property(1, Integer.class, "treasure_id", false, "TREASURE_ID");
        public final static Property Treasure_owner_id = new Property(2, Integer.class, "treasure_owner_id", false, "TREASURE_OWNER_ID");
        public final static Property Appraiser_id = new Property(3, Integer.class, "appraiser_id", false, "APPRAISER_ID");
        public final static Property Appraisal_result = new Property(4, Integer.class, "appraisal_result", false, "APPRAISAL_RESULT");
        public final static Property Appraisal_data = new Property(5, String.class, "appraisal_data", false, "APPRAISAL_DATA");
        public final static Property Is_valid = new Property(6, Integer.class, "is_valid", false, "IS_VALID");
        public final static Property Is_appraisal_completed = new Property(7, Integer.class, "is_appraisal_completed", false, "IS_APPRAISAL_COMPLETED");
        public final static Property Insert_time = new Property(8, java.util.Date.class, "insert_time", false, "INSERT_TIME");
    };


    public MyAppraisalTreasureDao(DaoConfig config) {
        super(config);
    }
    
    public MyAppraisalTreasureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MY_APPRAISAL_TREASURE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TREASURE_ID' INTEGER," + // 1: treasure_id
                "'TREASURE_OWNER_ID' INTEGER," + // 2: treasure_owner_id
                "'APPRAISER_ID' INTEGER," + // 3: appraiser_id
                "'APPRAISAL_RESULT' INTEGER," + // 4: appraisal_result
                "'APPRAISAL_DATA' TEXT," + // 5: appraisal_data
                "'IS_VALID' INTEGER," + // 6: is_valid
                "'IS_APPRAISAL_COMPLETED' INTEGER," + // 7: is_appraisal_completed
                "'INSERT_TIME' INTEGER);"); // 8: insert_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MY_APPRAISAL_TREASURE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyAppraisalTreasure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer treasure_id = entity.getTreasure_id();
        if (treasure_id != null) {
            stmt.bindLong(2, treasure_id);
        }
 
        Integer treasure_owner_id = entity.getTreasure_owner_id();
        if (treasure_owner_id != null) {
            stmt.bindLong(3, treasure_owner_id);
        }
 
        Integer appraiser_id = entity.getAppraiser_id();
        if (appraiser_id != null) {
            stmt.bindLong(4, appraiser_id);
        }
 
        Integer appraisal_result = entity.getAppraisal_result();
        if (appraisal_result != null) {
            stmt.bindLong(5, appraisal_result);
        }
 
        String appraisal_data = entity.getAppraisal_data();
        if (appraisal_data != null) {
            stmt.bindString(6, appraisal_data);
        }
 
        Integer is_valid = entity.getIs_valid();
        if (is_valid != null) {
            stmt.bindLong(7, is_valid);
        }
 
        Integer is_appraisal_completed = entity.getIs_appraisal_completed();
        if (is_appraisal_completed != null) {
            stmt.bindLong(8, is_appraisal_completed);
        }
 
        java.util.Date insert_time = entity.getInsert_time();
        if (insert_time != null) {
            stmt.bindLong(9, insert_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyAppraisalTreasure readEntity(Cursor cursor, int offset) {
        MyAppraisalTreasure entity = new MyAppraisalTreasure( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // treasure_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // treasure_owner_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // appraiser_id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // appraisal_result
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // appraisal_data
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // is_valid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // is_appraisal_completed
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // insert_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyAppraisalTreasure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTreasure_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTreasure_owner_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAppraiser_id(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAppraisal_result(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAppraisal_data(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_valid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIs_appraisal_completed(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setInsert_time(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MyAppraisalTreasure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MyAppraisalTreasure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
