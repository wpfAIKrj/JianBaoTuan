package com.it.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.it.model.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property Portrait = new Property(4, String.class, "portrait", false, "PORTRAIT");
        public final static Property User_type = new Property(5, Integer.class, "user_type", false, "USER_TYPE");
        public final static Property User_level = new Property(6, Integer.class, "user_level", false, "USER_LEVEL");
        public final static Property Personal_data = new Property(7, String.class, "personal_data", false, "PERSONAL_DATA");
        public final static Property Is_valid = new Property(8, Integer.class, "is_valid", false, "IS_VALID");
        public final static Property Is_famous_expert = new Property(9, Integer.class, "is_famous_expert", false, "IS_FAMOUS_EXPERT");
        public final static Property Insert_time = new Property(10, java.util.Date.class, "insert_time", false, "INSERT_TIME");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NICKNAME' TEXT," + // 1: nickname
                "'PASSWORD' TEXT," + // 2: password
                "'MOBILE' TEXT," + // 3: mobile
                "'PORTRAIT' TEXT," + // 4: portrait
                "'USER_TYPE' INTEGER," + // 5: user_type
                "'USER_LEVEL' INTEGER," + // 6: user_level
                "'PERSONAL_DATA' TEXT," + // 7: personal_data
                "'IS_VALID' INTEGER," + // 8: is_valid
                "'IS_FAMOUS_EXPERT' INTEGER," + // 9: is_famous_expert
                "'INSERT_TIME' INTEGER);"); // 10: insert_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(5, portrait);
        }
 
        Integer user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindLong(6, user_type);
        }
 
        Integer user_level = entity.getUser_level();
        if (user_level != null) {
            stmt.bindLong(7, user_level);
        }
 
        String personal_data = entity.getPersonal_data();
        if (personal_data != null) {
            stmt.bindString(8, personal_data);
        }
 
        Integer is_valid = entity.getIs_valid();
        if (is_valid != null) {
            stmt.bindLong(9, is_valid);
        }
 
        Integer is_famous_expert = entity.getIs_famous_expert();
        if (is_famous_expert != null) {
            stmt.bindLong(10, is_famous_expert);
        }
 
        java.util.Date insert_time = entity.getInsert_time();
        if (insert_time != null) {
            stmt.bindLong(11, insert_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // portrait
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // user_type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // user_level
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // personal_data
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // is_valid
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // is_famous_expert
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // insert_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPortrait(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_type(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUser_level(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPersonal_data(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_valid(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIs_famous_expert(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setInsert_time(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
